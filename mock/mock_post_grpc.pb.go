// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/protobuf/post/v1/post_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/jxlwqq/blog-microservices/api/protobuf/post/v1"
	grpc "google.golang.org/grpc"
)

// MockPostServiceClient is a mock of PostServiceClient interface.
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient.
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance.
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostServiceClient) CreatePost(ctx context.Context, in *v1.CreatePostRequest, opts ...grpc.CallOption) (*v1.CreatePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*v1.CreatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServiceClientMockRecorder) CreatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServiceClient)(nil).CreatePost), varargs...)
}

// DecrementCommentsCount mocks base method.
func (m *MockPostServiceClient) DecrementCommentsCount(ctx context.Context, in *v1.DecrementCommentsCountRequest, opts ...grpc.CallOption) (*v1.DecrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DecrementCommentsCount", varargs...)
	ret0, _ := ret[0].(*v1.DecrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementCommentsCount indicates an expected call of DecrementCommentsCount.
func (mr *MockPostServiceClientMockRecorder) DecrementCommentsCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCommentsCount", reflect.TypeOf((*MockPostServiceClient)(nil).DecrementCommentsCount), varargs...)
}

// DecrementCommentsCountCompensate mocks base method.
func (m *MockPostServiceClient) DecrementCommentsCountCompensate(ctx context.Context, in *v1.DecrementCommentsCountRequest, opts ...grpc.CallOption) (*v1.DecrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DecrementCommentsCountCompensate", varargs...)
	ret0, _ := ret[0].(*v1.DecrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementCommentsCountCompensate indicates an expected call of DecrementCommentsCountCompensate.
func (mr *MockPostServiceClientMockRecorder) DecrementCommentsCountCompensate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCommentsCountCompensate", reflect.TypeOf((*MockPostServiceClient)(nil).DecrementCommentsCountCompensate), varargs...)
}

// DeletePost mocks base method.
func (m *MockPostServiceClient) DeletePost(ctx context.Context, in *v1.DeletePostRequest, opts ...grpc.CallOption) (*v1.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*v1.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostServiceClientMockRecorder) DeletePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceClient)(nil).DeletePost), varargs...)
}

// DeletePostCompensate mocks base method.
func (m *MockPostServiceClient) DeletePostCompensate(ctx context.Context, in *v1.DeletePostRequest, opts ...grpc.CallOption) (*v1.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePostCompensate", varargs...)
	ret0, _ := ret[0].(*v1.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePostCompensate indicates an expected call of DeletePostCompensate.
func (mr *MockPostServiceClientMockRecorder) DeletePostCompensate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostCompensate", reflect.TypeOf((*MockPostServiceClient)(nil).DeletePostCompensate), varargs...)
}

// GetPost mocks base method.
func (m *MockPostServiceClient) GetPost(ctx context.Context, in *v1.GetPostRequest, opts ...grpc.CallOption) (*v1.GetPostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*v1.GetPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostServiceClientMockRecorder) GetPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostServiceClient)(nil).GetPost), varargs...)
}

// IncrementCommentsCount mocks base method.
func (m *MockPostServiceClient) IncrementCommentsCount(ctx context.Context, in *v1.IncrementCommentsCountRequest, opts ...grpc.CallOption) (*v1.IncrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncrementCommentsCount", varargs...)
	ret0, _ := ret[0].(*v1.IncrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementCommentsCount indicates an expected call of IncrementCommentsCount.
func (mr *MockPostServiceClientMockRecorder) IncrementCommentsCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCommentsCount", reflect.TypeOf((*MockPostServiceClient)(nil).IncrementCommentsCount), varargs...)
}

// IncrementCommentsCountCompensate mocks base method.
func (m *MockPostServiceClient) IncrementCommentsCountCompensate(ctx context.Context, in *v1.IncrementCommentsCountRequest, opts ...grpc.CallOption) (*v1.IncrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncrementCommentsCountCompensate", varargs...)
	ret0, _ := ret[0].(*v1.IncrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementCommentsCountCompensate indicates an expected call of IncrementCommentsCountCompensate.
func (mr *MockPostServiceClientMockRecorder) IncrementCommentsCountCompensate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCommentsCountCompensate", reflect.TypeOf((*MockPostServiceClient)(nil).IncrementCommentsCountCompensate), varargs...)
}

// ListPosts mocks base method.
func (m *MockPostServiceClient) ListPosts(ctx context.Context, in *v1.ListPostsRequest, opts ...grpc.CallOption) (*v1.ListPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPosts", varargs...)
	ret0, _ := ret[0].(*v1.ListPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockPostServiceClientMockRecorder) ListPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockPostServiceClient)(nil).ListPosts), varargs...)
}

// UpdatePost mocks base method.
func (m *MockPostServiceClient) UpdatePost(ctx context.Context, in *v1.UpdatePostRequest, opts ...grpc.CallOption) (*v1.UpdatePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*v1.UpdatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostServiceClientMockRecorder) UpdatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceClient)(nil).UpdatePost), varargs...)
}

// MockPostServiceServer is a mock of PostServiceServer interface.
type MockPostServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceServerMockRecorder
}

// MockPostServiceServerMockRecorder is the mock recorder for MockPostServiceServer.
type MockPostServiceServerMockRecorder struct {
	mock *MockPostServiceServer
}

// NewMockPostServiceServer creates a new mock instance.
func NewMockPostServiceServer(ctrl *gomock.Controller) *MockPostServiceServer {
	mock := &MockPostServiceServer{ctrl: ctrl}
	mock.recorder = &MockPostServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceServer) EXPECT() *MockPostServiceServerMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostServiceServer) CreatePost(arg0 context.Context, arg1 *v1.CreatePostRequest) (*v1.CreatePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServiceServerMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServiceServer)(nil).CreatePost), arg0, arg1)
}

// DecrementCommentsCount mocks base method.
func (m *MockPostServiceServer) DecrementCommentsCount(arg0 context.Context, arg1 *v1.DecrementCommentsCountRequest) (*v1.DecrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementCommentsCount", arg0, arg1)
	ret0, _ := ret[0].(*v1.DecrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementCommentsCount indicates an expected call of DecrementCommentsCount.
func (mr *MockPostServiceServerMockRecorder) DecrementCommentsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCommentsCount", reflect.TypeOf((*MockPostServiceServer)(nil).DecrementCommentsCount), arg0, arg1)
}

// DecrementCommentsCountCompensate mocks base method.
func (m *MockPostServiceServer) DecrementCommentsCountCompensate(arg0 context.Context, arg1 *v1.DecrementCommentsCountRequest) (*v1.DecrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementCommentsCountCompensate", arg0, arg1)
	ret0, _ := ret[0].(*v1.DecrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementCommentsCountCompensate indicates an expected call of DecrementCommentsCountCompensate.
func (mr *MockPostServiceServerMockRecorder) DecrementCommentsCountCompensate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCommentsCountCompensate", reflect.TypeOf((*MockPostServiceServer)(nil).DecrementCommentsCountCompensate), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockPostServiceServer) DeletePost(arg0 context.Context, arg1 *v1.DeletePostRequest) (*v1.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostServiceServerMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceServer)(nil).DeletePost), arg0, arg1)
}

// DeletePostCompensate mocks base method.
func (m *MockPostServiceServer) DeletePostCompensate(arg0 context.Context, arg1 *v1.DeletePostRequest) (*v1.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostCompensate", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePostCompensate indicates an expected call of DeletePostCompensate.
func (mr *MockPostServiceServerMockRecorder) DeletePostCompensate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostCompensate", reflect.TypeOf((*MockPostServiceServer)(nil).DeletePostCompensate), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockPostServiceServer) GetPost(arg0 context.Context, arg1 *v1.GetPostRequest) (*v1.GetPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostServiceServerMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostServiceServer)(nil).GetPost), arg0, arg1)
}

// IncrementCommentsCount mocks base method.
func (m *MockPostServiceServer) IncrementCommentsCount(arg0 context.Context, arg1 *v1.IncrementCommentsCountRequest) (*v1.IncrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCommentsCount", arg0, arg1)
	ret0, _ := ret[0].(*v1.IncrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementCommentsCount indicates an expected call of IncrementCommentsCount.
func (mr *MockPostServiceServerMockRecorder) IncrementCommentsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCommentsCount", reflect.TypeOf((*MockPostServiceServer)(nil).IncrementCommentsCount), arg0, arg1)
}

// IncrementCommentsCountCompensate mocks base method.
func (m *MockPostServiceServer) IncrementCommentsCountCompensate(arg0 context.Context, arg1 *v1.IncrementCommentsCountRequest) (*v1.IncrementCommentsCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCommentsCountCompensate", arg0, arg1)
	ret0, _ := ret[0].(*v1.IncrementCommentsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementCommentsCountCompensate indicates an expected call of IncrementCommentsCountCompensate.
func (mr *MockPostServiceServerMockRecorder) IncrementCommentsCountCompensate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCommentsCountCompensate", reflect.TypeOf((*MockPostServiceServer)(nil).IncrementCommentsCountCompensate), arg0, arg1)
}

// ListPosts mocks base method.
func (m *MockPostServiceServer) ListPosts(arg0 context.Context, arg1 *v1.ListPostsRequest) (*v1.ListPostsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockPostServiceServerMockRecorder) ListPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockPostServiceServer)(nil).ListPosts), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockPostServiceServer) UpdatePost(arg0 context.Context, arg1 *v1.UpdatePostRequest) (*v1.UpdatePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostServiceServerMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceServer)(nil).UpdatePost), arg0, arg1)
}

// mustEmbedUnimplementedPostServiceServer mocks base method.
func (m *MockPostServiceServer) mustEmbedUnimplementedPostServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServiceServer")
}

// mustEmbedUnimplementedPostServiceServer indicates an expected call of mustEmbedUnimplementedPostServiceServer.
func (mr *MockPostServiceServerMockRecorder) mustEmbedUnimplementedPostServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServiceServer", reflect.TypeOf((*MockPostServiceServer)(nil).mustEmbedUnimplementedPostServiceServer))
}

// MockUnsafePostServiceServer is a mock of UnsafePostServiceServer interface.
type MockUnsafePostServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePostServiceServerMockRecorder
}

// MockUnsafePostServiceServerMockRecorder is the mock recorder for MockUnsafePostServiceServer.
type MockUnsafePostServiceServerMockRecorder struct {
	mock *MockUnsafePostServiceServer
}

// NewMockUnsafePostServiceServer creates a new mock instance.
func NewMockUnsafePostServiceServer(ctrl *gomock.Controller) *MockUnsafePostServiceServer {
	mock := &MockUnsafePostServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePostServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePostServiceServer) EXPECT() *MockUnsafePostServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPostServiceServer mocks base method.
func (m *MockUnsafePostServiceServer) mustEmbedUnimplementedPostServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServiceServer")
}

// mustEmbedUnimplementedPostServiceServer indicates an expected call of mustEmbedUnimplementedPostServiceServer.
func (mr *MockUnsafePostServiceServerMockRecorder) mustEmbedUnimplementedPostServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServiceServer", reflect.TypeOf((*MockUnsafePostServiceServer)(nil).mustEmbedUnimplementedPostServiceServer))
}
